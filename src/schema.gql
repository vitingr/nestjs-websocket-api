# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: String!
  uuid: String!
  name: String!
  firstname: String!
  lastname: String!
  clubname: String!
  email: String!
  password: String
  currency: Float!
  qtdCards: Int
  badge: String
  badgeImage: String
  friends: [String!]!
  qtdFriends: Int
  pendingFriends: [String!]
  lineups: [String!]
  driverMenu: Boolean!
  driverHome: Boolean!
  driverLineup: Boolean!
  driverProfile: Boolean!
  newUser: Boolean!
  futpoints: Int
  points: Int
  victories: Int
  draws: Int
  loses: Int
  searchingMatch: Boolean
  currentLineup: String
  quizCompleted: [String!]!
}

type Card {
  id: String!
  cardImage: String!
  name: String!
  club: String!
  league: String!
  type: String!
  position: String!
  overall: Int!
  pace: Int!
  finalization: Int!
  pass: Int!
  drible: Int!
  defense: Int!
  physic: Int!
  minValue: Float!
  maxValue: Float!
  quickSellValue: Float!
}

type Lineup {
  id: String!
  name: String!
  overall: Float
  totalOverall: Float
  owner: String!
  player1: String
  player2: String
  player3: String
  player4: String
  player5: String
  player6: String
  player7: String
  player8: String
  player9: String
  player10: String
  player11: String
}

type GeneratedCard {
  id: String!
  cardImage: String!
  owner: String!
  selling: Boolean!
  created: DateTime!
  price: Float
  playerId: String!
  name: String!
  club: String!
  league: String!
  type: String!
  position: String!
  overall: Int!
  pace: Int!
  finalization: Int!
  pass: Int!
  drible: Int!
  defense: Int!
  physic: Int!
  minValue: Float!
  maxValue: Float!
  quickSellValue: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GeneratedBadge {
  id: String!
  badgeId: String!
  ownerId: String!
  selling: Boolean!
  created: DateTime!
  price: Float
  badgeImage: String!
  clubname: String!
  maxValue: Float!
  minValue: Float!
  quickSellValue: Float!
}

type PackResponse {
  id: String
  cardImage: String
  owner: String
  selling: Boolean
  created: DateTime
  price: Float
  playerId: String
  name: String
  club: String
  league: String
  type: String
  position: String
  overall: Int
  pace: Int
  finalization: Int
  pass: Int
  drible: Int
  defense: Int
  physic: Int
  minValue: Float
  maxValue: Float
  quickSellValue: Float
  badgeId: String
  ownerId: String
  badgeImage: String
  clubname: String
  GeneratedCard: [GeneratedCard!]
  GeneratedBadge: [GeneratedBadge!]
}

type Badge {
  id: String!
  badgeImage: String!
  clubname: String!
  maxValue: Float!
  minValue: Float!
  quickSellValue: Float!
}

type Query {
  getUser(uuid: String!): User!
  getAllUsers: [User!]!
  getUserFriends(friends: [String!]!): [User!]!
  getUserPendingFriends(playersId: [String!]!): [User!]!
  findOneUser(id: String!): User!
  findAll: [GeneratedBadge!]!
  findOne(id: String!): GeneratedCard!
  findLineup(id: String!): Lineup!
  getUserLineups(id: String!): [Lineup!]!
  findUserCurrentLineup(id: String!): Lineup!
  findUserCards(id: String!): [GeneratedCard!]!
  findSellingCards: [GeneratedCard!]!
  findUserBadge(id: String!): GeneratedBadge!
  findUserBadges(id: String!): [GeneratedBadge!]!
  findSellingBadges: [GeneratedBadge!]!
  generatedBadge(id: Int!): GeneratedBadge!
}

type Mutation {
  createNewUser(createUser: CreateUser!): User!
  changeClubName(changeClubName: ChangeClubName!): User!
  useMenuDriver(id: String!): User!
  useHomeDriver(id: String!): User!
  useLineupDriver(id: String!): User!
  useProfileDriver(id: String!): User!
  changeClubBadge(changeClubBadge: ChangeClubBadge!): User!
  completeQuiz(completeQuiz: CompleteQuizProps!): User!
  createCard(createCardInput: CreateCardInput!): Card!
  createLineup(createLineupInput: CreateLineupInput!): Lineup!
  deleteUserLineup(deleteUserLineup: DeleteUserLineupProps!): Lineup!
  updateLineupCard(updateLineupCard: UpdateLineupCard!): Lineup!
  selectLineup(selectLineup: SelectLineup!): User!
  removeLineupPlayer(removeLineupPlayer: RemoveLineupPlayer!): Lineup!
  createGeneratedCard(createGeneratedCardInput: CreateGeneratedCardInput!): GeneratedCard!
  sellCard(sellCard: SellCard!): GeneratedCard!
  buyCard(sellCard: SellCard!): GeneratedCard!
  openPlayersPack(openPack: OpenPackProps!): [PackResponse!]!
  openRareGoldPack(openPack: OpenPackProps!): [PackResponse!]!
  openGoldPack(openPack: OpenPackProps!): [PackResponse!]!
  openRareSilverPack(openPack: OpenPackProps!): [PackResponse!]!
  openSilverPack(openPack: OpenPackProps!): [PackResponse!]!
  openBronzePack(openPack: OpenPackProps!): [PackResponse!]!
  quickSellCard(quickSellCard: QuickSellProps!): User!
  pickStarterTeam(pickStarterTeam: PickStarterTeamProps!): [GeneratedCard!]!
  finishClubSetup(clubSetup: ClubSetupProps!): User!
  createBadge(createBadgeInput: CreateBadgeInput!): Badge!
  sellBadge(sellBadge: SellBadge!): GeneratedBadge!
  buyBadge(buyBadge: BuyBadge!): GeneratedBadge!
  createGeneratedBadge(createGeneratedBadgeInput: CreateGeneratedBadgeInput!): GeneratedBadge!
  updateGeneratedBadge(updateGeneratedBadgeInput: UpdateGeneratedBadgeInput!): GeneratedBadge!
  removeGeneratedBadge(id: Int!): GeneratedBadge!
}

input CreateUser {
  uuid: String!
  name: String!
  firstname: String!
  lastname: String!
  clubname: String!
  email: String!
  password: String
}

input ChangeClubName {
  userId: String!
  clubname: String!
}

input ChangeClubBadge {
  userId: String!
  clubBadge: String!
  badgeImage: String!
}

input CompleteQuizProps {
  userId: String!
  quiz: String!
  prize: Float!
}

input CreateCardInput {
  cardImage: String!
  name: String!
  club: String!
  league: String!
  type: String!
  position: String!
  overall: Int!
  pace: Int!
  finalization: Int!
  pass: Int!
  drible: Int!
  defense: Int!
  physic: Int!
  minValue: Float!
  maxValue: Float!
  quickSellValue: Float!
}

input CreateLineupInput {
  name: String!
  overall: Float
  totalOverall: Float
  owner: String!
}

input DeleteUserLineupProps {
  lineupId: String!
  userId: String!
}

input UpdateLineupCard {
  lineupId: String!
  playerId: String!
  playerData: String!
  index: Int!
}

input SelectLineup {
  userId: String!
  lineupId: String!
}

input RemoveLineupPlayer {
  lineupId: String!
  position: String!
}

input CreateGeneratedCardInput {
  cardImage: String!
  owner: String!
  selling: Boolean!
  price: Float
  playerId: String!
  name: String!
  club: String!
  league: String!
  type: String!
  position: String!
  overall: Int!
  pace: Int!
  finalization: Int!
  pass: Int!
  drible: Int!
  defense: Int!
  physic: Int!
  minValue: Float!
  maxValue: Float!
  quickSellValue: Float!
}

input SellCard {
  ownerId: String!
  newOwnerId: String!
  playerId: String!
  price: Float!
}

input OpenPackProps {
  userId: String!
  method: String!
}

input QuickSellProps {
  ownerId: String!
  cardId: String!
  price: Float!
}

input PickStarterTeamProps {
  userId: String!
  type: String!
}

input ClubSetupProps {
  id: String!
  clubname: String!
}

input CreateBadgeInput {
  badgeImage: String!
  clubname: String!
  maxValue: Float!
  minValue: Float!
  quickSellValue: Float!
}

input SellBadge {
  id: String!
  price: Float!
  ownerId: String!
}

input BuyBadge {
  id: String!
  ownerId: String!
  newOwnerId: String!
  price: Float!
}

input CreateGeneratedBadgeInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateGeneratedBadgeInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}