generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  uuid                String                @unique
  name                String
  firstname           String
  lastname            String
  clubname            String
  email               String                @unique
  password            String?
  currency            Float                 @default(500)
  qtdCards            Int?                  @default(0)
  badge               String?               @default("")
  friends             String[]
  qtdFriends          Int?                  @default(0)
  pendingFriends      String[]
  driverMenu          Boolean               @default(false)
  driverHome          Boolean               @default(false)
  driverLineup        Boolean               @default(false)
  driverProfile       Boolean               @default(false)
  newUser             Boolean               @default(true)
  lineups             String[]
  futpoints           Int                   @default(0)
  points              Int                   @default(0)
  victories           Int?                  @default(0)
  draws               Int?                  @default(0)
  loses               Int?                  @default(0)
  searchingMatch      Boolean?              @default(false)
  currentLineup       String?               @db.ObjectId
  PlayerCardGenerated PlayerCardGenerated[]
  Lineup              Lineup[]
  BadgeCreated        BadgeCreated[]
}

model PlayerCard {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  cardImage           String                @default("")
  name                String
  club                String
  league              String
  overall             Int
  type                String
  position            String
  pace                Int
  finalization        Int
  pass                Int
  drible              Int
  defense             Int
  physic              Int
  maxValue            Float                 @default(10000)
  minValue            Float                 @default(150)
  quickSellValue      Float                 @default(150)
  PlayerCardGenerated PlayerCardGenerated[]
}

model PlayerCardGenerated {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  cardImage      String    @default("")
  owner          String    @db.ObjectId
  selling        Boolean   @default(false)
  created        DateTime? @default(now())
  price          Float?
  playerId       String    @db.ObjectId
  name           String
  club           String
  league         String
  overall        Int
  type           String
  position       String
  pace           Int
  finalization   Int
  pass           Int
  drible         Int
  defense        Int
  physic         Int
  maxValue       Float     @default(10000)
  minValue       Float     @default(150)
  quickSellValue Float     @default(150)

  // Relations
  userId User       @relation(fields: [owner], references: [id])
  cardId PlayerCard @relation(fields: [playerId], references: [id])
}

model Lineup {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  overall      Float?  @default(0)
  totalOverall Float?  @default(0)
  owner        String  @db.ObjectId
  player1      String?
  player2      String?
  player3      String?
  player4      String?
  player5      String?
  player6      String?
  player7      String?
  player8      String?
  player9      String?
  player10     String?
  player11     String?

  // Relations
  ownerId User @relation(fields: [owner], references: [id])
}

model Badge {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  badgeImage     String
  clubname       String
  maxValue       Float          @default(5000)
  minValue       Float          @default(150)
  quickSellValue Float          @default(150)
  BadgeCreated   BadgeCreated[]
}

model BadgeCreated {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  badgeId        String    @db.ObjectId
  ownerId        String    @db.ObjectId
  selling        Boolean   @default(false)
  created        DateTime? @default(now())
  price          Float?
  badgeImage     String
  clubname       String
  maxValue       Float     @default(5000)
  minValue       Float     @default(150)
  quickSellValue Float     @default(150)

  // Relations
  badge Badge @relation(fields: [badgeId], references: [id])
  owner User  @relation(fields: [ownerId], references: [id])
}

model Match {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @db.ObjectId
  opponentId       String   @db.ObjectId
  userAccepted     Boolean?
  opponentAccepted Boolean?
  round1           String?  @db.ObjectId
  round2           String?  @db.ObjectId
  round3           String?  @db.ObjectId
  round4           String?  @db.ObjectId
  round5           String?  @db.ObjectId
  round6           String?  @db.ObjectId
  round7           String?  @db.ObjectId
  round8           String?  @db.ObjectId
  round9           String?  @db.ObjectId
  round10          String?  @db.ObjectId
  round11          String?  @db.ObjectId
  userPoints       Int?     @default(0)
  opponentPoints   Int?     @default(0)
}
